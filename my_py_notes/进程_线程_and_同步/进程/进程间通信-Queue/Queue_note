Queue的使用

可以使用multiprocessing模块的Queue实现多进程之间的数据传递

Queue本身就是一个消息队列程序

## 说明:
初始化Queue()对象时(eg. q=Queue()),
    若括号中没有指定最⼤可接收的消息数量, 或数量为负值
    那么就代表可接受的消息数量没有上限(直到内存的尽头)

Queue.qsize()： 返回当前队列包含的消息数量；
Queue.empty()： 如果队列为空， 返回True， 反之False ；
Queue.full()：  如果队列满了， 返回True,反之False；
Queue.get([block[, timeout]])： 获取队列中的⼀条消息, 然后将其从列队中移除, block默认值为True；
                1) 如果block使⽤默认值, 且没有设置timeout(单位秒), 消息列队如果为空, 此时程序将被阻塞(停在读取状态), 直到从消息列队读到消息为⽌
                    如果设置了timeout, 则会等待timeout秒, 若还没读取到任何消息, 则抛出"Queue.Empty"异常;
                2) 如果block值为False, 消息列队如果为空, 则会⽴刻抛出"Queue.Empty"异常;
Queue.get_nowait(): 相当Queue.get(False);
Queue.put(item,[block[, timeout]]): 将item消息写⼊队列, block默认值为True；
                1） 如果block使⽤默认值， 且没有设置timeout（ 单位秒） ， 消息列队如果已
                    经没有空间可写⼊， 此时程序将被阻塞（ 停在写⼊状态） ， 直到从消息列队
                    腾出空间为⽌， 如果设置了timeout， 则会等待timeout秒， 若还没空间， 则抛
                    出"Queue.Full"异常；
                2） 如果block值为False， 消息列队如果没有空间可写⼊， 则会⽴刻抛
                    出"Queue.Full"异常；
Queue.put_nowait(item)： 相当Queue.put(item, False)；